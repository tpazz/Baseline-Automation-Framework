repositories {
    mavenLocal()
    mavenCentral()
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:2.0.81')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'

dependencies {
    implementation ('net.serenity-bdd:serenity-core:2.0.67')  {
        exclude group: 'io.cucumber', module: 'cucumber-core'
    }
    implementation('net.serenity-bdd:serenity-cucumber4:1.0.21')
    implementation('io.cucumber:cucumber-java:4.2.0')
    implementation('io.cucumber:cucumber-junit:4.2.0')
    implementation('org.apache.logging.log4j:log4j-api:2.19.0')
    implementation('org.apache.logging.log4j:log4j-core:2.19.0')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher:1.5.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.5.2')
    testRuntimeOnly('org.junit.vintage:junit-vintage-engine:5.5.2')
    implementation('org.assertj:assertj-core:3.8.0')
    implementation(group: 'org.json', name: 'json', version: '20090211')
    implementation('com.google.code.gson:gson:2.8.9')
    testImplementation('org.hamcrest:hamcrest-library:2.2')
}

task importJunitResultsToXrayCloud() {
    description 'Imports Junit test results to Xray Test Management for Jira Cloud.'
    dependsOn 'test'

    def xrayApiBaseUrl = 'https://xray.cloud.getxray.app/api/v2'
    // the following variables can be defined locally or in gradle.properties
    //  - clientId, clientSecret
    //  - reportFormat, projectKey version, revision, testPlanKey, testExecKey, testEnvironment

    def reportFile = "target/cucumber-reports/Cucumber.json"

    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                ignoreExitValue = true
                commandLine 'curl', '-H','"Content-Type:application/json"', '-X','POST', '--data', "\"{\\\"client_id\\\":\\\"${clientId}\\\",\\\"client_secret\\\": \\\"${clientSecret}\\\" }\"", "${xrayApiBaseUrl}/authenticate"
                standardOutput = os
            }
            if (result.getExitValue() != 0) {
                println result
            } else {
                def token = os.toString().replaceAll("\"","")
                println "Authenticated with Xray!"

                new ByteArrayOutputStream().withStream { os2 ->
                    def result2 = exec {
                        ignoreExitValue = true

                        def url = "${xrayApiBaseUrl}/import/execution/${reportFormat}?"
                        if (projectKey?.trim()) {
                            url += "&projectKey=${projectKey}"
                        }
                        if (version?.trim()) {
                            url += "&fixVersion=${version}"
                        }
                        if (revision?.trim()) {
                            url += "&revision=${revision}"
                        }
                        if (testPlanKey?.trim()) {
                            url += "&testPlanKey=${testPlanKey}"
                        }
                        if (testExecKey?.trim()) {
                            url += "&testExecKey=${testExecKey}"
                        }
                        if (testEnvironment?.trim()) {
                            url += "&testEnvironments=${testEnvironment}"
                        }

                        commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: application/json', '-X','POST', '-H', "Authorization: Bearer ${token}", '--data', "@${reportFile}", url
                        standardOutput = os2
                    }
                    if (result2.getExitValue() != 0) {
                        println "ERROR: problem importing results to Xray"
                        println os2.toString()
                    } else {
                        println "Resuls imported to Xray!"
                        println os2.toString()
                    }
                }
            }
        }
    }
}

test {
    ignoreFailures = false // keep this enabled for Xray upload
    maxParallelForks = 1 // Maximum value must be <= number of cores on CPU
    systemProperty('webdriver.driver','provided')
    systemProperty('webdriver.provided.type','mydriver')
    switch (project.findProperty('driver').toString()) {
        case "chrome":
            switch (project.findProperty('os').toString()) {
                case "windows": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.windows.ChromeDriverProperties')
                    break
                case "linux": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.linux.ChromeDriverProperties')
                    break
                case "mac": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.mac.ChromeDriverProperties')
                    break
            }
            break;
        case "firefox":
            switch (project.findProperty('os').toString()) {
                case "windows": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.windows.FireFoxDriverProperties')
                    break
                case "linux": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.linux.FireFoxDriverProperties')
                    break
                case "mac": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.mac.FireFoxDriverProperties')
                    break
            }
            break;
        case "edge":
            switch (project.findProperty('os').toString()) {
                case "windows": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.windows.EdgeDriverProperties')
                    break
                case "linux": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.linux.EdgeDriverProperties')
                    break
                case "mac": systemProperty('webdriver.provided.mydriver','org.example.tools.webdriver.provided.mac.EdgeDriverProperties')
                    break
            }
            break
    }
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate)
