defaultTasks 'clean', 'test', 'aggregate', 'reports'

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:4.2.22"
        classpath "net.serenity-bdd:serenity-single-page-report:4.2.22"
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

sourceCompatibility = 16
targetCompatibility = 16

ext {
    serenity_version = '4.2.22'
    junit_platform_launcher_version="1.11.4"
    cucumber_junit_platform_engine_version="7.20.1"
    junit_platform_suite_version="1.11.4"
    junit_jupiter_engine_version="5.11.4"
    junit_vintage_engine_version="5.11.4"
    assertj_core_version="3.23.1"
    log4j_version="2.19.0"
    json_version="20231013"
    slf4j_version="2.0.12"
    selenium_java_version="4.32.0"
}

dependencies {
    testImplementation "net.serenity-bdd:serenity-core:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-cucumber:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-screenplay:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenity_version}"
    testImplementation "net.serenity-bdd:serenity-ensure:${serenity_version}"
    testImplementation "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumber_junit_platform_engine_version}"
    testImplementation "org.junit.platform:junit-platform-suite:${junit_platform_suite_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_engine_version}"
    testImplementation "org.junit.vintage:junit-vintage-engine:${junit_vintage_engine_version}"
    testImplementation "org.assertj:assertj-core:${assertj_core_version}"
    implementation "org.apache.logging.log4j:log4j-api:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j_version}"
    implementation "org.seleniumhq.selenium:selenium-java:${selenium_java_version}"
    implementation "org.json:json:${json_version}"
    runtimeOnly "org.slf4j:slf4j-simple:${slf4j_version}"
}

test {
    useJUnitPlatform()
    systemProperty 'webdriver.driver',        'provided'
    systemProperty 'webdriver.provided.type', 'mydriver'

    def drv = (project.findProperty('driver') ?: 'chrome').toString()
    def os  = (project.findProperty('os')     ?: 'windows').toString()

    def base = 'org.example.tools.webdriver.provided'
    def impl = "${base}.${os}.${drv.capitalize()}DriverProperties"

    systemProperty 'webdriver.provided.mydriver', impl
    if (project.hasProperty('headless') && project.property('headless') == 'true') {
        systemProperty 'headless', 'true'
    }
    maxParallelForks = 1
}

serenity {
    reports = ["single-page-html"]
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate, reports)

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "-Xlint:deprecation"
}

task importJunitResultsToXrayCloud() {
    description 'Imports Junit test results to Xray Test Management for Jira Cloud.'
    dependsOn 'test'

    def xrayApiBaseUrl = 'https://xray.cloud.getxray.app/api/v2'
    // the following variables can be defined locally or in gradle.properties
    //  - clientId, clientSecret
    //  - reportFormat, projectKey version, revision, testPlanKey, testExecKey, testEnvironment

    def reportFile = "target/cucumber-reports/json/Cucumber.json"

    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                ignoreExitValue = true
                commandLine 'curl', '-H','"Content-Type:application/json"', '-X','POST', '--data', "\"{\\\"client_id\\\":\\\"${clientId}\\\",\\\"client_secret\\\": \\\"${clientSecret}\\\" }\"", "${xrayApiBaseUrl}/authenticate"
                standardOutput = os
            }
            if (result.getExitValue() != 0) {
                println result
            } else {
                def token = os.toString().replaceAll("\"","")
                println "Authenticated with Xray!"

                new ByteArrayOutputStream().withStream { os2 ->
                    def result2 = exec {
                        ignoreExitValue = true

                        def url = "${xrayApiBaseUrl}/import/execution/${reportFormat}?"
                        if (projectKey?.trim()) {
                            url += "&projectKey=${projectKey}"
                        }
                        if (version?.trim()) {
                            url += "&fixVersion=${version}"
                        }
                        if (revision?.trim()) {
                            url += "&revision=${revision}"
                        }
                        if (testPlanKey?.trim()) {
                            url += "&testPlanKey=${testPlanKey}"
                        }
                        if (testExecKey?.trim()) {
                            url += "&testExecKey=${testExecKey}"
                        }
                        if (testEnvironment?.trim()) {
                            url += "&testEnvironments=${testEnvironment}"
                        }

                        commandLine 'curl', '--silent', '--fail-with-body', '-H','Content-Type: application/json', '-X','POST', '-H', "Authorization: Bearer ${token}", '--data', "@${reportFile}", url
                        standardOutput = os2
                    }
                    if (result2.getExitValue() != 0) {
                        println "ERROR: problem importing results to Xray"
                        println os2.toString()
                    } else {
                        println "Resuls imported to Xray!"
                        println os2.toString()
                    }
                }
            }
        }
    }
}

